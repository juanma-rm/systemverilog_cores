#include <iostream>
#include <verilated.h>
#include <verilated_vcd_c.h> // For waveform dumping

// Include the header generated by Verilator for the top module
#include "Vspi_slave_receiver_tb.h"

// Current simulation time (used by Verilator for $time)
vluint64_t main_time = 0;

// Called by $time in Verilog
double sc_time_stamp() {
    return main_time;
}

int main(int argc, char** argv, char** env) {
    
    // Initialize Verilator (parse command line arguments, etc.)
    Verilated::commandArgs(argc, argv);

    // Create an instance of the Verilated model (top-level module)
    Vspi_slave_receiver_tb* top = new Vspi_slave_receiver_tb;

    // Create a VCD trace object
    Verilated::traceEverOn(true); // Enable VCD tracing (for waveforms)
    VerilatedVcdC* tfp = new VerilatedVcdC;
    top->trace(tfp, 99); // Trace all signals up to 99 levels deep
    tfp->open("spi_slave_receiver_tb.vcd"); // Specify the VCD output file name

    // Initialize signals (if they aren't initialized by an 'initial' block in SV)
    top->clk = 0;
    top->rst_n = 0; // Assuming active low reset

    // Run simulation for a specified number of clock cycles or until $finish
    const vluint64_t SIM_DURATION_CLKS = 1000; // Example: Simulate for 1000 clock cycles
    const vluint64_t CLK_PERIOD_TIME_UNITS = 10; // Clock period = 10 units

    while (!Verilated::gotFinish() && main_time < (SIM_DURATION_CLKS * CLK_PERIOD_TIME_UNITS)) {
        
        // Toggle clock
        if ((main_time % (CLK_PERIOD_TIME_UNITS / 2)) == 0) { // Half-cycle toggle
            top->clk = !top->clk;
        }

        // Drive reset for a few cycles
        if (main_time == 0) { // Assert reset at time 0
            top->rst_n = 0;
        } else if (main_time == CLK_PERIOD_TIME_UNITS * 5) { // De-assert reset after 5 clock cycles
            top->rst_n = 1;
        }

        // Evaluate the model (propagate changes through the design)
        top->eval();

        // Dump waveforms for the current time
        tfp->dump(main_time);

        // Advance simulation time
        main_time++;
    }

    // Clean up
    tfp->close();
    delete tfp;
    delete top;

    std::cout << "Simulation finished at time " << main_time << std::endl;
    return 0;
}